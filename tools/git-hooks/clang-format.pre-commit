#!/usr/bin/env bash
# Copyright (c) 2015, David Martin. All rights reserved.
# Copyright (c) 2017-2021. The SimGrid team. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#  git pre-commit hook that runs a clang-format stylecheck.
#  Features:
#   - abort commit when commit does not comply with the style guidelines
#   - create a patch of the proposed style changes

# Modifications for clang-format by rene.milk@wwu.de
# This file is part of a set of unofficial pre-commit hooks available
# at github.
# Link:    https://github.com/githubbrowser/Pre-commit-hooks

# Modifications for modern clang formats and other improvements as part of the SimGrid project.
# See git logs for the detail of changes.

##################################################################
# Settings

# remove any older patches from previous commits. Set to true or false.
DELETE_OLD_PATCHES=true

# only parse files with the extensions in FILE_EXTS. Set to true or false.
# if false every changed file in the commit will be parsed with clang-format.
# if true only files matching one of the extensions are parsed with clang-format.
PARSE_EXTS=true

# file types to parse. Only effective when PARSE_EXTS is true.
# FILE_EXTS=".c .h .cpp .hpp"
FILE_EXTS=".c .h .cpp .hpp .cc .hh .cxx"

##################################################################
# Potential names for clang-format (debian...)
CLANG_FMT_PNAMES=(clang-format clang-format-5.0 clang-format-4.0 clang-format-3.9 clang-format-3.8)
CLANG_FMT_CMD="NOT-FOUND"
GIT_CLANG_FMT_CMD="NOT-FOUND"

# Find which clang-format should be used
for name in ${CLANG_FMT_PNAMES[*]}
do
    where=$(which ${name} 2> /dev/null)
    if [ x != "x${where}" ]
    then
        echo "clang-format found: ${where}"
        CLANG_FMT_CMD=${where}
        break
    fi
done

if [[ "${CLANG_FMT_CMD}" == NOT-FOUND ]]
then
    echo "Unable to find clang-format! Please install it:"
    echo "- debian(-like): apt-get install clang-format[-VERSION]"
    echo "- arch(-like): pacman -S clang"
    echo "- ..."
    exit 1
fi

# Find which git-clang-format should be used
for name in ${CLANG_FMT_PNAMES[*]}
do
    where=$(which "git-${name}" 2> /dev/null)
    if [ x != "x${where}" ]
    then
        echo "git-clang-format found: ${where}"
        GIT_CLANG_FMT_CMD=${where}
        break
    fi
done

if [[ "${GIT_CLANG_FMT_CMD}" == NOT-FOUND ]]
then
    echo "Unable to find git-clang-format! Please install it:"
    echo "- debian(-like): apt-get install clang-format[-VERSION]"
    echo "- arch(-like): pacman -S clang"
    echo "- ..."
    exit 1
fi

# error on unset variable expansion
set -u
# exit on error
set -e

# There should be no need to change anything below this line.

# Reference: http://stackoverflow.com/questions/1055671/how-can-i-get-the-behavior-of-gnus-readlink-f-on-a-mac
canonicalize_filename () {
    local target_file=${1}
    local physical_directory=""
    local result=""

    # Need to restore the working directory after work.
    pushd $(pwd) > /dev/null

    cd "$(dirname "${target_file}")"
    target_file=$(basename ${target_file})

    # Iterate down a (possible) chain of symlinks
    while [ -L "${target_file}" ]
    do
        target_file=$(readlink "${target_file}")
        cd "$(dirname "${target_file}")"
        target_file=$(basename "${target_file}")
    done

    # Compute the canonicalized name by finding the physical path
    # for the directory we're in and appending the target file.
    physical_directory=$(pwd -P)
    result="${physical_directory}"/"${target_file}"

    # restore the working directory after work.
    popd > /dev/null

    echo "${result}"
}

# check whether the given file matches any of the set extensions
matches_extension() {
    local filename=$(basename "${1}")
    local extension=".${filename##*.}"
    local ext

    for ext in ${FILE_EXTS}; do [[ "${ext}" == "${extension}" ]] && return 0; done

    return 1
}

# necessary check for initial commit
if git rev-parse --verify HEAD >/dev/null 2>&1 ; then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=foobaridonotexist
fi

# create a random filename to store our generated patch
prefix="pre-commit-clang-format"
suffix="$(date +%s)"
patch="/tmp/${prefix}-${suffix}.patch"

# clean up any older clang-format patches
${DELETE_OLD_PATCHES} && rm -f /tmp/${prefix}*.patch

# create one patch containing all changes to the files
git diff-index --cached --diff-filter=ACMR --name-only ${against} -- | while read file;
do
    # ignore file if we do check for file extensions and the file
    # does not match any of the extensions specified in $FILE_EXTS
    if ${PARSE_EXTS} && ! matches_extension "${file}"; then
        continue;
    fi

    # clang-format our sourcefile, create a patch with diff and append it to our $patch
    # The sed call is necessary to transform the patch from
    #    --- $file timestamp
    #    +++ - timestamp
    # to both lines working on the same file and having a a/ and b/ prefix.
    # Else it can not be applied with 'git apply'.
    ${GIT_CLANG_FMT_CMD} --binary ${CLANG_FMT_CMD} --diff -q "${file}" \
      | (grep -v "no modified files to format"||true) \
      >> "${patch}"
    #"${CLANG_FMT_CMD}" -style=file "${file}" | \
        #diff -u "${file}" - | \
        #sed -e "1s|--- |--- a/|" -e "2s|+++ -|+++ b/${file}|" >> "${patch}"
done

# if no patch has been generated all is ok, clean up the file stub and exit
if [ ! -s "${patch}" ] ; then
    printf "Files in this commit comply with the clang-format rules.\n"
    rm -f "${patch}"
    exit 0
fi

# a patch has been created, notify the user and exit
printf "\nThe following differences were found between the code to commit "
printf "and the clang-format rules:\n\n"
cat "${patch}"

printf "\nYou can apply these changes and read the files with:\n"
printf "  git apply ${patch} &&  git apply --cached ${patch}\n"
printf "(call this command from the root directory of your repository)\n"
printf "\n\n\n"
printf "Aborting commit. Apply changes and commit again.\n"
# printf "Skip checking with: --no-verify (not recommended).\n"

exit 1
